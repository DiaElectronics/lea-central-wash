// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserConfig user config
// swagger:model UserConfig
type UserConfig struct {

	// first name
	// Required: true
	// Min Length: 1
	FirstName *string `json:"firstName"`

	// is admin
	// Required: true
	IsAdmin *bool `json:"isAdmin"`

	// is engineer
	// Required: true
	IsEngineer *bool `json:"isEngineer"`

	// is operator
	// Required: true
	IsOperator *bool `json:"isOperator"`

	// last name
	// Required: true
	// Min Length: 1
	LastName *string `json:"lastName"`

	// login
	// Required: true
	// Min Length: 1
	Login *string `json:"login"`

	// middle name
	// Required: true
	// Min Length: 1
	MiddleName *string `json:"middleName"`

	// password
	// Required: true
	// Max Length: 4
	// Min Length: 4
	// Pattern: ^[0123456789]{4}$
	Password *string `json:"password"`
}

// Validate validates this user config
func (m *UserConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsAdmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEngineer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserConfig) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("firstName", "body", m.FirstName); err != nil {
		return err
	}

	if err := validate.MinLength("firstName", "body", string(*m.FirstName), 1); err != nil {
		return err
	}

	return nil
}

func (m *UserConfig) validateIsAdmin(formats strfmt.Registry) error {

	if err := validate.Required("isAdmin", "body", m.IsAdmin); err != nil {
		return err
	}

	return nil
}

func (m *UserConfig) validateIsEngineer(formats strfmt.Registry) error {

	if err := validate.Required("isEngineer", "body", m.IsEngineer); err != nil {
		return err
	}

	return nil
}

func (m *UserConfig) validateIsOperator(formats strfmt.Registry) error {

	if err := validate.Required("isOperator", "body", m.IsOperator); err != nil {
		return err
	}

	return nil
}

func (m *UserConfig) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("lastName", "body", m.LastName); err != nil {
		return err
	}

	if err := validate.MinLength("lastName", "body", string(*m.LastName), 1); err != nil {
		return err
	}

	return nil
}

func (m *UserConfig) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("login", "body", m.Login); err != nil {
		return err
	}

	if err := validate.MinLength("login", "body", string(*m.Login), 1); err != nil {
		return err
	}

	return nil
}

func (m *UserConfig) validateMiddleName(formats strfmt.Registry) error {

	if err := validate.Required("middleName", "body", m.MiddleName); err != nil {
		return err
	}

	if err := validate.MinLength("middleName", "body", string(*m.MiddleName), 1); err != nil {
		return err
	}

	return nil
}

func (m *UserConfig) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", string(*m.Password), 4); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(*m.Password), 4); err != nil {
		return err
	}

	if err := validate.Pattern("password", "body", string(*m.Password), `^[0123456789]{4}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserConfig) UnmarshalBinary(b []byte) error {
	var res UserConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
