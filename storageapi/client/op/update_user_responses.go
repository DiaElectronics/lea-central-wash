// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateUserReader is a Reader for the UpdateUser structure.
type UpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewUpdateUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateUserOK creates a UpdateUserOK with default headers values
func NewUpdateUserOK() *UpdateUserOK {
	return &UpdateUserOK{}
}

/*UpdateUserOK handles this case with default header values.

OK
*/
type UpdateUserOK struct {
	Payload *UpdateUserOKBody
}

func (o *UpdateUserOK) Error() string {
	return fmt.Sprintf("[PUT /user][%d] updateUserOK  %+v", 200, o.Payload)
}

func (o *UpdateUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserUnauthorized creates a UpdateUserUnauthorized with default headers values
func NewUpdateUserUnauthorized() *UpdateUserUnauthorized {
	return &UpdateUserUnauthorized{}
}

/*UpdateUserUnauthorized handles this case with default header values.

PIN is missing or invalid
*/
type UpdateUserUnauthorized struct {
}

func (o *UpdateUserUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /user][%d] updateUserUnauthorized ", 401)
}

func (o *UpdateUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserNotFound creates a UpdateUserNotFound with default headers values
func NewUpdateUserNotFound() *UpdateUserNotFound {
	return &UpdateUserNotFound{}
}

/*UpdateUserNotFound handles this case with default header values.

Not found
*/
type UpdateUserNotFound struct {
}

func (o *UpdateUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /user][%d] updateUserNotFound ", 404)
}

func (o *UpdateUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateUserInternalServerError creates a UpdateUserInternalServerError with default headers values
func NewUpdateUserInternalServerError() *UpdateUserInternalServerError {
	return &UpdateUserInternalServerError{}
}

/*UpdateUserInternalServerError handles this case with default header values.

internal error
*/
type UpdateUserInternalServerError struct {
}

func (o *UpdateUserInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /user][%d] updateUserInternalServerError ", 500)
}

func (o *UpdateUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*UpdateUserBody update user body
swagger:model UpdateUserBody
*/
type UpdateUserBody struct {

	// first name
	// Min Length: 1
	FirstName *string `json:"firstName,omitempty"`

	// is admin
	IsAdmin *bool `json:"isAdmin,omitempty"`

	// is engineer
	IsEngineer *bool `json:"isEngineer,omitempty"`

	// is operator
	IsOperator *bool `json:"isOperator,omitempty"`

	// last name
	// Min Length: 1
	LastName *string `json:"lastName,omitempty"`

	// login
	// Required: true
	// Min Length: 1
	Login *string `json:"login"`

	// middle name
	// Min Length: 1
	MiddleName *string `json:"middleName,omitempty"`
}

// Validate validates this update user body
func (o *UpdateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMiddleName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserBody) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(o.FirstName) { // not required
		return nil
	}

	if err := validate.MinLength("args"+"."+"firstName", "body", string(*o.FirstName), 1); err != nil {
		return err
	}

	return nil
}

func (o *UpdateUserBody) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(o.LastName) { // not required
		return nil
	}

	if err := validate.MinLength("args"+"."+"lastName", "body", string(*o.LastName), 1); err != nil {
		return err
	}

	return nil
}

func (o *UpdateUserBody) validateLogin(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"login", "body", o.Login); err != nil {
		return err
	}

	if err := validate.MinLength("args"+"."+"login", "body", string(*o.Login), 1); err != nil {
		return err
	}

	return nil
}

func (o *UpdateUserBody) validateMiddleName(formats strfmt.Registry) error {

	if swag.IsZero(o.MiddleName) { // not required
		return nil
	}

	if err := validate.MinLength("args"+"."+"middleName", "body", string(*o.MiddleName), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserOKBody update user o k body
swagger:model UpdateUserOKBody
*/
type UpdateUserOKBody struct {

	// id
	// Required: true
	ID *int64 `json:"id"`
}

// Validate validates this update user o k body
func (o *UpdateUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserOKBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("updateUserOK"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
