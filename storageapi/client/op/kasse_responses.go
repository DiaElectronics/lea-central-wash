// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// KasseReader is a Reader for the Kasse structure.
type KasseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KasseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewKasseOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewKasseDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewKasseOK creates a KasseOK with default headers values
func NewKasseOK() *KasseOK {
	return &KasseOK{}
}

/*KasseOK handles this case with default header values.

OK
*/
type KasseOK struct {
	Payload *model.KasseConfig
}

func (o *KasseOK) Error() string {
	return fmt.Sprintf("[POST /kasse][%d] kasseOK  %+v", 200, o.Payload)
}

func (o *KasseOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.KasseConfig)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewKasseDefault creates a KasseDefault with default headers values
func NewKasseDefault(code int) *KasseDefault {
	return &KasseDefault{
		_statusCode: code,
	}
}

/*KasseDefault handles this case with default header values.

Generic error response.
*/
type KasseDefault struct {
	_statusCode int

	Payload *model.Error
}

// Code gets the status code for the kasse default response
func (o *KasseDefault) Code() int {
	return o._statusCode
}

func (o *KasseDefault) Error() string {
	return fmt.Sprintf("[POST /kasse][%d] kasse default  %+v", o._statusCode, o.Payload)
}

func (o *KasseDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
