// Code generated by go-swagger; DO NOT EDIT.

package op

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/DiaElectronics/lea-central-wash/storageapi/model"
)

// SetKasseReader is a Reader for the SetKasse structure.
type SetKasseReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetKasseReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewSetKasseNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewSetKasseDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSetKasseNoContent creates a SetKasseNoContent with default headers values
func NewSetKasseNoContent() *SetKasseNoContent {
	return &SetKasseNoContent{}
}

/*SetKasseNoContent handles this case with default header values.

OK
*/
type SetKasseNoContent struct {
}

func (o *SetKasseNoContent) Error() string {
	return fmt.Sprintf("[POST /set-kasse][%d] setKasseNoContent ", 204)
}

func (o *SetKasseNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetKasseDefault creates a SetKasseDefault with default headers values
func NewSetKasseDefault(code int) *SetKasseDefault {
	return &SetKasseDefault{
		_statusCode: code,
	}
}

/*SetKasseDefault handles this case with default header values.

- 409.1600: email is not available
- 409.1601: account is not available
- 422.1602: password is too weak
- 409.1604: code is not available

*/
type SetKasseDefault struct {
	_statusCode int

	Payload *model.Error
}

// Code gets the status code for the set kasse default response
func (o *SetKasseDefault) Code() int {
	return o._statusCode
}

func (o *SetKasseDefault) Error() string {
	return fmt.Sprintf("[POST /set-kasse][%d] setKasse default  %+v", o._statusCode, o.Payload)
}

func (o *SetKasseDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(model.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
